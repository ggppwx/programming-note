{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"booknotes/effective-python/","text":"Effective python Pythonic thinking PEP 8 style PEP 8 style helper function bytes, str and unicode how to slice don't use stride with start/end list comprehensions use generator to replace big list comprehension use try .. except . else finally use enumerate instead of range use zip to do parallel iteration Functions don't return None , throw exception scope in closure use generator to replace list from function return Be defensive when iterating over arguents Define a class which includes __iter__ , pass the object to function Variable positional arguents def log(message, *values): pass favorites = [7, 33, 99] log('Favorite colors', *favorites) provide optional behavior with keyword arguments the sequence should be normal, positional, optional arguements Use NONE and docstring to sepecify dynamic default argumetns def decode(data, default=None): \"\"\"Load JSON data from a string. Args: data: JSON data to decode. default: Value to return if decoding fails. Defaults to an empty dictionary. \"\"\" if default is None: default = {} Enforce clarity with keyword-only arguments Add * before keyword arguments, then it becomes keyword-only def safe_division_c(number, divisor, *, ignore_overflow=False, ignore_zero_division=False): Class Prefer helper clsses over dictionary and tuples Avoid doing dictionary nesting more than one level Use namedtuple type import collections Grade = collections.namedtuple('Grade', ('score', 'weight')) Accept functions instead of classes Use lambda and closure Function is first class object class CountMissing(object): def __init__(self): self.added = 0 def __call__(self): # function self.added += 1 return 0 counter = CountMissing() # counter is a function result = defaultdict(couter, current) Use =@classmethod=to construct objects generically Map reduce example. Add the creation funtion to the base class level class InputData(object): def read(self): raise NotImplementedError @classmethod def generate_inputs(cls, config): raise NotImplementedError class Worker(object): def map(self): raise NotImplementedError def reduce(self, other) raise NotImplementedError @classmethod def create_workers(cls, input_class, config): workers = [] for input_data in input_class.generate_inputs(config): workers.append(cls(input_data)) #cls = the sub-class itself # LineCountWorker, PathInputData are sub-classes workers = LineCountWorker.create_workers(PathInputData, config) Initialize parent classes with super Avoid the subclass override the previous subclass, super() class only called once class Goodway(TimeFive, PlusTwo): def __init__(self, value): super(Goodway, self).__init__(value) # super().__init__(value) in python 3 ret = Goodway(5) # order is defined in MRO Use Multiple Inheritance only for mix-in utility class Concurrency Use subprocess to manage child processes this makes python a good glue communicate() to run subproceses in python3, we could add timeout Use threads for blocking I/O. avoid for parallelsim GIL, threading may causes program running longer ! but if the call is IO bound, for example, system call, threading will help built-in modules define function decorators with functools.wraps Decorators: run addional code before/after any calls Use wraps to make the function name unchanged def trace(func): @wraps(func) def wrapper(*args, **kwargs): pass return wrapper consider contextlib and with statement for reusable try behavior with == try/finally block enalbe your objects to with using contextlib simpler than adding __enter__ __exit__ @contextmanager def debug_logging(level): logger.setLevel(level) try: yield # which with block execute # yield logger #if we wanna use as finally: pass make pickle reliable with copyreg pickle.dump and pickle.load useful for saving game copyreg.pickle(GameState, pickle_game_state) stable import path Use datetime instead of TIME Use built-in algorithm and data structure deque() OrderedDict defaultdict heapq , heappush , heappop =bisect left (x, 99999) binary serach itertools collaboration production","title":"Effective python"},{"location":"booknotes/effective-python/#effective-python","text":"","title":"Effective python"},{"location":"booknotes/effective-python/#pythonic-thinking","text":"","title":"Pythonic thinking"},{"location":"booknotes/effective-python/#pep-8-style","text":"PEP 8 style","title":"PEP 8 style"},{"location":"booknotes/effective-python/#helper-function","text":"","title":"helper function"},{"location":"booknotes/effective-python/#bytes-str-and-unicode","text":"","title":"bytes, str and unicode"},{"location":"booknotes/effective-python/#how-to-slice","text":"","title":"how to slice"},{"location":"booknotes/effective-python/#dont-use-stride-with-startend","text":"","title":"don't use stride with start/end"},{"location":"booknotes/effective-python/#list-comprehensions","text":"","title":"list comprehensions"},{"location":"booknotes/effective-python/#use-generator-to-replace-big-list-comprehension","text":"","title":"use generator to replace big list comprehension"},{"location":"booknotes/effective-python/#use-try-except-else-finally","text":"","title":"use try .. except &#x2026;. else &#x2026; finally"},{"location":"booknotes/effective-python/#use-enumerate-instead-of-range","text":"","title":"use enumerate instead of range"},{"location":"booknotes/effective-python/#use-zip-to-do-parallel-iteration","text":"","title":"use zip to do parallel iteration"},{"location":"booknotes/effective-python/#functions","text":"","title":"Functions"},{"location":"booknotes/effective-python/#dont-return-none-throw-exception","text":"","title":"don't return None, throw exception"},{"location":"booknotes/effective-python/#scope-in-closure","text":"","title":"scope in closure"},{"location":"booknotes/effective-python/#use-generator-to-replace-list-from-function-return","text":"","title":"use generator to replace list from function return"},{"location":"booknotes/effective-python/#be-defensive-when-iterating-over-arguents","text":"Define a class which includes __iter__ , pass the object to function","title":"Be defensive when iterating over arguents"},{"location":"booknotes/effective-python/#variable-positional-arguents","text":"def log(message, *values): pass favorites = [7, 33, 99] log('Favorite colors', *favorites)","title":"Variable positional arguents"},{"location":"booknotes/effective-python/#provide-optional-behavior-with-keyword-arguments","text":"the sequence should be normal, positional, optional arguements","title":"provide optional behavior with keyword arguments"},{"location":"booknotes/effective-python/#use-none-and-docstring-to-sepecify-dynamic-default-argumetns","text":"def decode(data, default=None): \"\"\"Load JSON data from a string. Args: data: JSON data to decode. default: Value to return if decoding fails. Defaults to an empty dictionary. \"\"\" if default is None: default = {}","title":"Use NONE and docstring to sepecify dynamic default argumetns"},{"location":"booknotes/effective-python/#enforce-clarity-with-keyword-only-arguments","text":"Add * before keyword arguments, then it becomes keyword-only def safe_division_c(number, divisor, *, ignore_overflow=False, ignore_zero_division=False):","title":"Enforce clarity with keyword-only arguments"},{"location":"booknotes/effective-python/#class","text":"","title":"Class"},{"location":"booknotes/effective-python/#prefer-helper-clsses-over-dictionary-and-tuples","text":"Avoid doing dictionary nesting more than one level Use namedtuple type import collections Grade = collections.namedtuple('Grade', ('score', 'weight'))","title":"Prefer helper clsses over dictionary and tuples"},{"location":"booknotes/effective-python/#accept-functions-instead-of-classes","text":"Use lambda and closure Function is first class object class CountMissing(object): def __init__(self): self.added = 0 def __call__(self): # function self.added += 1 return 0 counter = CountMissing() # counter is a function result = defaultdict(couter, current)","title":"Accept functions instead of classes"},{"location":"booknotes/effective-python/#use-classmethodto-construct-objects-generically","text":"Map reduce example. Add the creation funtion to the base class level class InputData(object): def read(self): raise NotImplementedError @classmethod def generate_inputs(cls, config): raise NotImplementedError class Worker(object): def map(self): raise NotImplementedError def reduce(self, other) raise NotImplementedError @classmethod def create_workers(cls, input_class, config): workers = [] for input_data in input_class.generate_inputs(config): workers.append(cls(input_data)) #cls = the sub-class itself # LineCountWorker, PathInputData are sub-classes workers = LineCountWorker.create_workers(PathInputData, config)","title":"Use =@classmethod=to construct objects generically"},{"location":"booknotes/effective-python/#initialize-parent-classes-with-super","text":"Avoid the subclass override the previous subclass, super() class only called once class Goodway(TimeFive, PlusTwo): def __init__(self, value): super(Goodway, self).__init__(value) # super().__init__(value) in python 3 ret = Goodway(5) # order is defined in MRO","title":"Initialize parent classes with super"},{"location":"booknotes/effective-python/#use-multiple-inheritance-only-for-mix-in-utility-class","text":"","title":"Use Multiple Inheritance only for mix-in utility class"},{"location":"booknotes/effective-python/#concurrency","text":"","title":"Concurrency"},{"location":"booknotes/effective-python/#use-subprocess-to-manage-child-processes","text":"this makes python a good glue communicate() to run subproceses in python3, we could add timeout","title":"Use subprocess to manage child processes"},{"location":"booknotes/effective-python/#use-threads-for-blocking-io-avoid-for-parallelsim","text":"GIL, threading may causes program running longer ! but if the call is IO bound, for example, system call, threading will help","title":"Use threads for blocking I/O. avoid for parallelsim"},{"location":"booknotes/effective-python/#built-in-modules","text":"","title":"built-in modules"},{"location":"booknotes/effective-python/#define-function-decorators-with-functoolswraps","text":"Decorators: run addional code before/after any calls Use wraps to make the function name unchanged def trace(func): @wraps(func) def wrapper(*args, **kwargs): pass return wrapper","title":"define function decorators with functools.wraps"},{"location":"booknotes/effective-python/#consider-contextlib-and-with-statement-for-reusable-try-behavior","text":"with == try/finally block enalbe your objects to with using contextlib simpler than adding __enter__ __exit__ @contextmanager def debug_logging(level): logger.setLevel(level) try: yield # which with block execute # yield logger #if we wanna use as finally: pass","title":"consider contextlib and with statement for reusable try behavior"},{"location":"booknotes/effective-python/#make-pickle-reliable-with-copyreg","text":"pickle.dump and pickle.load useful for saving game copyreg.pickle(GameState, pickle_game_state) stable import path","title":"make pickle reliable with copyreg"},{"location":"booknotes/effective-python/#use-datetime-instead-of-time","text":"","title":"Use datetime instead of TIME"},{"location":"booknotes/effective-python/#use-built-in-algorithm-and-data-structure","text":"deque() OrderedDict defaultdict heapq , heappush , heappop =bisect left (x, 99999) binary serach itertools","title":"Use built-in algorithm and data structure"},{"location":"booknotes/effective-python/#collaboration","text":"","title":"collaboration"},{"location":"booknotes/effective-python/#production","text":"","title":"production"}]}