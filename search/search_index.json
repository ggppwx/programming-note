{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"booknotes/cleancode/","text":"Cleancode \u00b6 meaningful name \u00b6 shorter name better no confusions, don\u2019t name \u2018List\u2019 if it is not a list pronounceable names search-able names, not too common no prefixes like m_ class method should have verb don\u2019t add extra context functions \u00b6 small function one line in if-else block, this should be a function do one thing means steps on one level consists of one thing one level of abstraction per function replace switch with polymorphism don\u2019t be afraid of using long descriptive name less function arguments transform function should return the value after transformation flag argument is UGLY be aware of dyadic function. wrap arguments by using objects argument list verb + noun function name no side effects, no hidden things in general, output argument should be avoided separate command & query error code vs try-catch duplication may be evil in software no continue, break, never go to functions are verb, classes are noun comments \u00b6 comments are always failure TRUTH SHOULD BE IN CODE formatting \u00b6 variable declaration, local variables should be declared on the top of the function functions caller should be above callee example public class CodeAnalyzer implements JavaFileAnalysis { private int lineCount; private int maxLineWidth; private int widestLineNumber; private LineWidthHistogram lineWidthHistogram; private int totalChars; public CodeAnalyzer() { lineWidthHistogram = new LineWidthHistogram(); } public static List findJavaFiles(File parentDirectory) { List files = new ArrayList (); findJavaFiles(parentDirectory, files); return files; } } instance variables should be declared at the top of the class in c++ on bottom java on top white spaces expand the indent , not in one-line objects and data structure \u00b6 object or data structure: 2 approaches data structure: expose data, no function. OO code makes easy to add new classes without changing methods procedural code makes it hard to add new data structure, easy to add functions hybrids are worst data transfer object. active record, a special form of DTO. having public ( or bean accessed) variables and navigational methods like save/find unit tests \u00b6 Note taken on [2016-08-17 Wed 00:23] IMO, it\u2019s very hard to do real test-driven development. but that doesn\u2019t means unit test is unnecessary, on the contrary, good unit test is helpful. But I also don\u2019t think it\u2019s good to write unit-test after production code, that is integration test. laws of TDD: write failing unit test. test and production code are written together having dirty test = having no test test code is as important as the production one readability is very important ! build - operate - check pattern, test should have 3 parts, create utility function to make code clean. one assert per test single concept per test FIRST rule fast independent on each other repeatable in any environment self-validating: fail or pass, not a log line timely: should be written before the production code that makes them pass do not test private methods no need to test all conner cases, test is used to help develop classes \u00b6 classes should be small a brief class description should be less than 25 words avoid Processor, Manager SRP, single responsibility principle in class cohesion should be high use derived classes to replace a single class. SQL generator example class should be open to extension but close to modification minimize coupling. stock exchange example, never depend on concrete class. write a stock exchange interface, write a testable dummy concrete class systems \u00b6 test-driven development \u00b6 all about discipline because code rots notes from wangyin\u2019s art of programming \u00b6 elegant code. \u00b6 tree structure, always have if else block modulize code \u00b6 the function should be less than 50 lines (one page ) create utility functions one purpose function no \u201cgeneric\u201d functions preFoo(); foo() { preFoo(); \u2026 } avoid using global variable/ member variable to pass info they don\u2019t have IN-OUT pipeline structure readable code \u00b6 meaningful function/variables local variable close to where it\u2019s used temp local variable should be short don\u2019t reuse local variable, do not be afraid of defining new ones use middle variable.(this contradicts with some coding style) write \u201csimple\u201d code \u00b6 avoid using ++i/\u2013i NEVER omit {} use () avoid continue; break; move break to the while condition ! continue condition write straight forward code \u00b6 avoid using action1() || action2() || action3() instead, using multiple if use if-else, avoid using control-flow as else. \u00b6 in this case, note that if-else may SHARE common code ! I think we could use control flow in the case above error handling \u00b6 when catching error, stop using generic \u201cException\u201d try-catch block should be short and neat null pointer \u00b6 avoid using NULL pointer not initialization not return stop catching NullPointerException check null immediately after its possible occurrence stop over-engineering \u00b6","title":"Cleancode"},{"location":"booknotes/cleancode/#cleancode","text":"","title":"Cleancode"},{"location":"booknotes/cleancode/#meaningful-name","text":"shorter name better no confusions, don\u2019t name \u2018List\u2019 if it is not a list pronounceable names search-able names, not too common no prefixes like m_ class method should have verb don\u2019t add extra context","title":"meaningful name"},{"location":"booknotes/cleancode/#functions","text":"small function one line in if-else block, this should be a function do one thing means steps on one level consists of one thing one level of abstraction per function replace switch with polymorphism don\u2019t be afraid of using long descriptive name less function arguments transform function should return the value after transformation flag argument is UGLY be aware of dyadic function. wrap arguments by using objects argument list verb + noun function name no side effects, no hidden things in general, output argument should be avoided separate command & query error code vs try-catch duplication may be evil in software no continue, break, never go to functions are verb, classes are noun","title":"functions"},{"location":"booknotes/cleancode/#comments","text":"comments are always failure TRUTH SHOULD BE IN CODE","title":"comments"},{"location":"booknotes/cleancode/#formatting","text":"variable declaration, local variables should be declared on the top of the function functions caller should be above callee example public class CodeAnalyzer implements JavaFileAnalysis { private int lineCount; private int maxLineWidth; private int widestLineNumber; private LineWidthHistogram lineWidthHistogram; private int totalChars; public CodeAnalyzer() { lineWidthHistogram = new LineWidthHistogram(); } public static List findJavaFiles(File parentDirectory) { List files = new ArrayList (); findJavaFiles(parentDirectory, files); return files; } } instance variables should be declared at the top of the class in c++ on bottom java on top white spaces expand the indent , not in one-line","title":"formatting"},{"location":"booknotes/cleancode/#objects-and-data-structure","text":"object or data structure: 2 approaches data structure: expose data, no function. OO code makes easy to add new classes without changing methods procedural code makes it hard to add new data structure, easy to add functions hybrids are worst data transfer object. active record, a special form of DTO. having public ( or bean accessed) variables and navigational methods like save/find","title":"objects and data structure"},{"location":"booknotes/cleancode/#unit-tests","text":"Note taken on [2016-08-17 Wed 00:23] IMO, it\u2019s very hard to do real test-driven development. but that doesn\u2019t means unit test is unnecessary, on the contrary, good unit test is helpful. But I also don\u2019t think it\u2019s good to write unit-test after production code, that is integration test. laws of TDD: write failing unit test. test and production code are written together having dirty test = having no test test code is as important as the production one readability is very important ! build - operate - check pattern, test should have 3 parts, create utility function to make code clean. one assert per test single concept per test FIRST rule fast independent on each other repeatable in any environment self-validating: fail or pass, not a log line timely: should be written before the production code that makes them pass do not test private methods no need to test all conner cases, test is used to help develop","title":"unit tests"},{"location":"booknotes/cleancode/#classes","text":"classes should be small a brief class description should be less than 25 words avoid Processor, Manager SRP, single responsibility principle in class cohesion should be high use derived classes to replace a single class. SQL generator example class should be open to extension but close to modification minimize coupling. stock exchange example, never depend on concrete class. write a stock exchange interface, write a testable dummy concrete class","title":"classes"},{"location":"booknotes/cleancode/#systems","text":"","title":"systems"},{"location":"booknotes/cleancode/#test-driven-development","text":"all about discipline because code rots","title":"test-driven development"},{"location":"booknotes/cleancode/#notes-from-wangyins-art-of-programming","text":"","title":"notes from wangyin's art of programming"},{"location":"booknotes/cleancode/#elegant-code","text":"tree structure, always have if else block","title":"elegant code."},{"location":"booknotes/cleancode/#modulize-code","text":"the function should be less than 50 lines (one page ) create utility functions one purpose function no \u201cgeneric\u201d functions preFoo(); foo() { preFoo(); \u2026 } avoid using global variable/ member variable to pass info they don\u2019t have IN-OUT pipeline structure","title":"modulize code"},{"location":"booknotes/cleancode/#readable-code","text":"meaningful function/variables local variable close to where it\u2019s used temp local variable should be short don\u2019t reuse local variable, do not be afraid of defining new ones use middle variable.(this contradicts with some coding style)","title":"readable code"},{"location":"booknotes/cleancode/#write-simple-code","text":"avoid using ++i/\u2013i NEVER omit {} use () avoid continue; break; move break to the while condition ! continue condition","title":"write \"simple\" code"},{"location":"booknotes/cleancode/#write-straight-forward-code","text":"avoid using action1() || action2() || action3() instead, using multiple if","title":"write straight forward code"},{"location":"booknotes/cleancode/#use-if-else-avoid-using-control-flow-as-else","text":"in this case, note that if-else may SHARE common code ! I think we could use control flow in the case above","title":"use if-else, avoid using control-flow as else."},{"location":"booknotes/cleancode/#error-handling","text":"when catching error, stop using generic \u201cException\u201d try-catch block should be short and neat","title":"error handling"},{"location":"booknotes/cleancode/#null-pointer","text":"avoid using NULL pointer not initialization not return stop catching NullPointerException check null immediately after its possible occurrence","title":"null pointer"},{"location":"booknotes/cleancode/#stop-over-engineering","text":"","title":"stop over-engineering"},{"location":"booknotes/effective-python/","text":"Effective python \u00b6 Pythonic thinking \u00b6 PEP 8 style \u00b6 PEP 8 style helper function \u00b6 bytes, str and unicode \u00b6 how to slice \u00b6 don\u2019t use stride with start/end \u00b6 list comprehensions \u00b6 use generator to replace big list comprehension \u00b6 use try .. except \u2026. else \u2026 finally \u00b6 use enumerate instead of range \u00b6 use zip to do parallel iteration \u00b6 Functions \u00b6 don\u2019t return None , throw exception \u00b6 scope in closure \u00b6 use generator to replace list from function return \u00b6 Be defensive when iterating over arguents \u00b6 Define a class which includes __iter__ , pass the object to function Variable positional arguents \u00b6 def log(message, *values): pass favorites = [7, 33, 99] log('Favorite colors', *favorites) provide optional behavior with keyword arguments \u00b6 the sequence should be normal, positional, optional arguements Use NONE and docstring to sepecify dynamic default argumetns \u00b6 def decode(data, default=None): \"\"\"Load JSON data from a string. Args: data: JSON data to decode. default: Value to return if decoding fails. Defaults to an empty dictionary. \"\"\" if default is None: default = {} Enforce clarity with keyword-only arguments \u00b6 Add * before keyword arguments, then it becomes keyword-only def safe_division_c(number, divisor, *, ignore_overflow=False, ignore_zero_division=False): Class \u00b6 Prefer helper clsses over dictionary and tuples \u00b6 Avoid doing dictionary nesting more than one level Use namedtuple type import collections Grade = collections.namedtuple('Grade', ('score', 'weight')) Accept functions instead of classes \u00b6 Use lambda and closure Function is first class object class CountMissing(object): def __init__(self): self.added = 0 def __call__(self): # function self.added += 1 return 0 counter = CountMissing() # counter is a function result = defaultdict(couter, current) Use =@classmethod=to construct objects generically \u00b6 Map reduce example. Add the creation funtion to the base class level class InputData(object): def read(self): raise NotImplementedError @classmethod def generate_inputs(cls, config): raise NotImplementedError class Worker(object): def map(self): raise NotImplementedError def reduce(self, other) raise NotImplementedError @classmethod def create_workers(cls, input_class, config): workers = [] for input_data in input_class.generate_inputs(config): workers.append(cls(input_data)) #cls => the sub-class itself # LineCountWorker, PathInputData are sub-classes workers = LineCountWorker.create_workers(PathInputData, config) Initialize parent classes with super \u00b6 Avoid the subclass override the previous subclass, super() class only called once class Goodway(TimeFive, PlusTwo): def __init__(self, value): super(Goodway, self).__init__(value) # super().__init__(value) in python 3 ret = Goodway(5) # order is defined in MRO Use Multiple Inheritance only for mix-in utility class \u00b6 Concurrency \u00b6 Use subprocess to manage child processes \u00b6 this makes python a good glue communicate() to run subproceses in python3, we could add timeout Use threads for blocking I/O. avoid for parallelsim \u00b6 GIL, threading may causes program running longer ! but if the call is IO bound, for example, system call, threading will help built-in modules \u00b6 define function decorators with functools.wraps \u00b6 Decorators: run addional code before/after any calls Use wraps to make the function name unchanged def trace(func): @wraps(func) def wrapper(*args, **kwargs): pass return wrapper consider contextlib and with statement for reusable try behavior \u00b6 with == try/finally block enalbe your objects to with using contextlib simpler than adding __enter__ __exit__ @contextmanager def debug_logging(level): logger.setLevel(level) try: yield # which with block execute # yield logger #if we wanna use as finally: pass make pickle reliable with copyreg \u00b6 pickle.dump and pickle.load useful for saving game copyreg.pickle(GameState, pickle_game_state) stable import path Use datetime instead of TIME \u00b6 Use built-in algorithm and data structure \u00b6 deque() OrderedDict defaultdict heapq , heappush , heappop =bisect left (x, 99999) binary serach itertools collaboration \u00b6 production \u00b6","title":"Effective python"},{"location":"booknotes/effective-python/#effective-python","text":"","title":"Effective python"},{"location":"booknotes/effective-python/#pythonic-thinking","text":"","title":"Pythonic thinking"},{"location":"booknotes/effective-python/#pep-8-style","text":"PEP 8 style","title":"PEP 8 style"},{"location":"booknotes/effective-python/#helper-function","text":"","title":"helper function"},{"location":"booknotes/effective-python/#bytes-str-and-unicode","text":"","title":"bytes, str and unicode"},{"location":"booknotes/effective-python/#how-to-slice","text":"","title":"how to slice"},{"location":"booknotes/effective-python/#dont-use-stride-with-startend","text":"","title":"don't use stride with start/end"},{"location":"booknotes/effective-python/#list-comprehensions","text":"","title":"list comprehensions"},{"location":"booknotes/effective-python/#use-generator-to-replace-big-list-comprehension","text":"","title":"use generator to replace big list comprehension"},{"location":"booknotes/effective-python/#use-try-except-else-finally","text":"","title":"use try .. except &#x2026;. else &#x2026; finally"},{"location":"booknotes/effective-python/#use-enumerate-instead-of-range","text":"","title":"use enumerate instead of range"},{"location":"booknotes/effective-python/#use-zip-to-do-parallel-iteration","text":"","title":"use zip to do parallel iteration"},{"location":"booknotes/effective-python/#functions","text":"","title":"Functions"},{"location":"booknotes/effective-python/#dont-return-none-throw-exception","text":"","title":"don't return None, throw exception"},{"location":"booknotes/effective-python/#scope-in-closure","text":"","title":"scope in closure"},{"location":"booknotes/effective-python/#use-generator-to-replace-list-from-function-return","text":"","title":"use generator to replace list from function return"},{"location":"booknotes/effective-python/#be-defensive-when-iterating-over-arguents","text":"Define a class which includes __iter__ , pass the object to function","title":"Be defensive when iterating over arguents"},{"location":"booknotes/effective-python/#variable-positional-arguents","text":"def log(message, *values): pass favorites = [7, 33, 99] log('Favorite colors', *favorites)","title":"Variable positional arguents"},{"location":"booknotes/effective-python/#provide-optional-behavior-with-keyword-arguments","text":"the sequence should be normal, positional, optional arguements","title":"provide optional behavior with keyword arguments"},{"location":"booknotes/effective-python/#use-none-and-docstring-to-sepecify-dynamic-default-argumetns","text":"def decode(data, default=None): \"\"\"Load JSON data from a string. Args: data: JSON data to decode. default: Value to return if decoding fails. Defaults to an empty dictionary. \"\"\" if default is None: default = {}","title":"Use NONE and docstring to sepecify dynamic default argumetns"},{"location":"booknotes/effective-python/#enforce-clarity-with-keyword-only-arguments","text":"Add * before keyword arguments, then it becomes keyword-only def safe_division_c(number, divisor, *, ignore_overflow=False, ignore_zero_division=False):","title":"Enforce clarity with keyword-only arguments"},{"location":"booknotes/effective-python/#class","text":"","title":"Class"},{"location":"booknotes/effective-python/#prefer-helper-clsses-over-dictionary-and-tuples","text":"Avoid doing dictionary nesting more than one level Use namedtuple type import collections Grade = collections.namedtuple('Grade', ('score', 'weight'))","title":"Prefer helper clsses over dictionary and tuples"},{"location":"booknotes/effective-python/#accept-functions-instead-of-classes","text":"Use lambda and closure Function is first class object class CountMissing(object): def __init__(self): self.added = 0 def __call__(self): # function self.added += 1 return 0 counter = CountMissing() # counter is a function result = defaultdict(couter, current)","title":"Accept functions instead of classes"},{"location":"booknotes/effective-python/#use-classmethodto-construct-objects-generically","text":"Map reduce example. Add the creation funtion to the base class level class InputData(object): def read(self): raise NotImplementedError @classmethod def generate_inputs(cls, config): raise NotImplementedError class Worker(object): def map(self): raise NotImplementedError def reduce(self, other) raise NotImplementedError @classmethod def create_workers(cls, input_class, config): workers = [] for input_data in input_class.generate_inputs(config): workers.append(cls(input_data)) #cls => the sub-class itself # LineCountWorker, PathInputData are sub-classes workers = LineCountWorker.create_workers(PathInputData, config)","title":"Use =@classmethod=to construct objects generically"},{"location":"booknotes/effective-python/#initialize-parent-classes-with-super","text":"Avoid the subclass override the previous subclass, super() class only called once class Goodway(TimeFive, PlusTwo): def __init__(self, value): super(Goodway, self).__init__(value) # super().__init__(value) in python 3 ret = Goodway(5) # order is defined in MRO","title":"Initialize parent classes with super"},{"location":"booknotes/effective-python/#use-multiple-inheritance-only-for-mix-in-utility-class","text":"","title":"Use Multiple Inheritance only for mix-in utility class"},{"location":"booknotes/effective-python/#concurrency","text":"","title":"Concurrency"},{"location":"booknotes/effective-python/#use-subprocess-to-manage-child-processes","text":"this makes python a good glue communicate() to run subproceses in python3, we could add timeout","title":"Use subprocess to manage child processes"},{"location":"booknotes/effective-python/#use-threads-for-blocking-io-avoid-for-parallelsim","text":"GIL, threading may causes program running longer ! but if the call is IO bound, for example, system call, threading will help","title":"Use threads for blocking I/O. avoid for parallelsim"},{"location":"booknotes/effective-python/#built-in-modules","text":"","title":"built-in modules"},{"location":"booknotes/effective-python/#define-function-decorators-with-functoolswraps","text":"Decorators: run addional code before/after any calls Use wraps to make the function name unchanged def trace(func): @wraps(func) def wrapper(*args, **kwargs): pass return wrapper","title":"define function decorators with functools.wraps"},{"location":"booknotes/effective-python/#consider-contextlib-and-with-statement-for-reusable-try-behavior","text":"with == try/finally block enalbe your objects to with using contextlib simpler than adding __enter__ __exit__ @contextmanager def debug_logging(level): logger.setLevel(level) try: yield # which with block execute # yield logger #if we wanna use as finally: pass","title":"consider contextlib and with statement for reusable try behavior"},{"location":"booknotes/effective-python/#make-pickle-reliable-with-copyreg","text":"pickle.dump and pickle.load useful for saving game copyreg.pickle(GameState, pickle_game_state) stable import path","title":"make pickle reliable with copyreg"},{"location":"booknotes/effective-python/#use-datetime-instead-of-time","text":"","title":"Use datetime instead of TIME"},{"location":"booknotes/effective-python/#use-built-in-algorithm-and-data-structure","text":"deque() OrderedDict defaultdict heapq , heappush , heappop =bisect left (x, 99999) binary serach itertools","title":"Use built-in algorithm and data structure"},{"location":"booknotes/effective-python/#collaboration","text":"","title":"collaboration"},{"location":"booknotes/effective-python/#production","text":"","title":"production"}]}